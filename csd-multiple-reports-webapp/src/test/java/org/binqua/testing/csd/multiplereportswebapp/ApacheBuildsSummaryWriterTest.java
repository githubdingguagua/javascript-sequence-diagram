package org.binqua.testing.csd.multiplereportswebapp;

import org.apache.commons.io.FileUtils;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static java.util.Arrays.asList;
import static org.apache.commons.io.FileUtils.readFileToString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ApacheBuildsSummaryWriterTest {

    private static final String CSD_BUILD_NUMBER = "123";
    private static final int SCAN_PERIOD_IN_SECS = 23;
    private static final java.lang.String CSD_HOME_PAGE_URL = "http://csdHomePage";
    private static final String BUILD_START_DATE_TIME = "Thur 23 May 2016 at 14:12:00";
    private static final String NEXT_BUILD_START_DATE_TIME = "Thur 23 May 2016 at 14:12:20";
    private static final String
        EXPECTED_BUILDS_DATE_TIME_CONTENT =
        "var reportTimeInfo = \"This report has been generated by <a href='" + CSD_HOME_PAGE_URL + "'> csd version " + CSD_BUILD_NUMBER + "</a> on " + BUILD_START_DATE_TIME
        + ". Next report will be generated in " + SCAN_PERIOD_IN_SECS
        + " secs, " + NEXT_BUILD_START_DATE_TIME + "\";";
    private static final String EXPECTED_BUILDS_SUMMARY_JSON_CONTENT = "some content";

    private static final String EXPECTED_BUILD_SUMMARY_FILE_CONTENT = EXPECTED_BUILDS_DATE_TIME_CONTENT + "\n" + "var sidebarContent = " + EXPECTED_BUILDS_SUMMARY_JSON_CONTENT;
    private static final String BUILDS_SUMMARY_JSON_FILE = "buildsSummary.js";

    private static final JenkinsBuildResponse FIRST_BUILD_RESPONSE = mock(JenkinsBuildResponse.class);
    private static final JenkinsBuildResponse SECOND_BUILD_RESPONSE = mock(JenkinsBuildResponse.class);

    private static final List<JenkinsBuildResponse> JENKINS_BUILD_RESPONSES = asList(FIRST_BUILD_RESPONSE, SECOND_BUILD_RESPONSE);

    @Rule
    public TemporaryFolder tempFolder = new TemporaryFolder();

    private File reportDestinationDir;

    private final BuildsSummaryFormatter buildsSummaryFormatter = mock(BuildsSummaryFormatter.class);
    private final ReportBuilderConfiguration reportBuilderConfiguration = mock(ReportBuilderConfiguration.class);
    private final DateTimeFormatter dateTimeFormatter = mock(DateTimeFormatter.class);
    private final DateTimeGenerator dateTimeGenerator = mock(DateTimeGenerator.class);

    private BuildsSummaryWriter buildsSummaryWriter;

    @Before
    public void setUp() throws Exception {
        reportDestinationDir = tempFolder.getRoot();

        when(reportBuilderConfiguration.reportDirectoryRoot()).thenReturn(reportDestinationDir);
        when(reportBuilderConfiguration.scanPeriodInSecs()).thenReturn(SCAN_PERIOD_IN_SECS);
        when(reportBuilderConfiguration.csdBuildNumber()).thenReturn(CSD_BUILD_NUMBER);
        when(reportBuilderConfiguration.csdHomePageUrl()).thenReturn(CSD_HOME_PAGE_URL);

        final DateTime startBuildDateTime = new DateTime();
        when(dateTimeGenerator.now()).thenReturn(startBuildDateTime);
        when(dateTimeFormatter.format(startBuildDateTime)).thenReturn(BUILD_START_DATE_TIME);
        when(dateTimeFormatter.format(startBuildDateTime.plusSeconds(SCAN_PERIOD_IN_SECS))).thenReturn(NEXT_BUILD_START_DATE_TIME);

        buildsSummaryWriter = new ApacheBuildsSummaryWriter(buildsSummaryFormatter, reportBuilderConfiguration, dateTimeFormatter, dateTimeGenerator);

        when(buildsSummaryFormatter.format(JENKINS_BUILD_RESPONSES)).thenReturn(EXPECTED_BUILDS_SUMMARY_JSON_CONTENT);
    }

    @Test
    public void givenBuildsSummaryFileDoesNotExistThenWriteCreatesTheRightFile() throws Exception {

        buildsSummaryWriter.write(JENKINS_BUILD_RESPONSES);

        assertThat(reportFileContentIn(reportDestinationDir), is(EXPECTED_BUILD_SUMMARY_FILE_CONTENT));

    }

    @Test
    public void givenBuildsSummaryFileAlreadyExistThenWriteOverrideIt() throws Exception {

        givenOldBuildsSummaryFileExist(new File(reportDestinationDir, BUILDS_SUMMARY_JSON_FILE));

        buildsSummaryWriter.write(JENKINS_BUILD_RESPONSES);

        assertThat(reportFileContentIn(reportDestinationDir), is(EXPECTED_BUILD_SUMMARY_FILE_CONTENT));

    }

    private String reportFileContentIn(File destinationDir) throws IOException {
        return readFileToString(new File(destinationDir, BUILDS_SUMMARY_JSON_FILE));
    }

    private void givenOldBuildsSummaryFileExist(File buildsSummaryFile) throws IOException {
        FileUtils.writeStringToFile(buildsSummaryFile, "old content");
        assertThat(buildsSummaryFile.exists(), is(true));
    }
}