package org.binqua.testing.csd.multiplereportswebapp;

import org.apache.commons.io.FileUtils;
import org.joda.time.DateTime;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static java.lang.String.format;

class ApacheBuildsSummaryWriter implements BuildsSummaryWriter {

    private final BuildsSummaryFormatter buildsSummaryFormatter;
    private ReportBuilderConfiguration reportBuilderConfiguration;
    private final DateTimeFormatter dateTimeFormatter;
    private final DateTimeGenerator dateTimeGenerator;
    private final File buildsSummaryDestinationFile;
    private final int scanPeriodInSecs;

    ApacheBuildsSummaryWriter(BuildsSummaryFormatter buildsSummaryFormatter,
                              ReportBuilderConfiguration reportBuilderConfiguration,
                              DateTimeFormatter dateTimeFormatter,
                              DateTimeGenerator dateTimeGenerator
    ) {
        this.buildsSummaryFormatter = buildsSummaryFormatter;
        this.reportBuilderConfiguration = reportBuilderConfiguration;
        this.dateTimeFormatter = dateTimeFormatter;
        this.dateTimeGenerator = dateTimeGenerator;
        this.buildsSummaryDestinationFile = reportBuilderConfiguration.reportDirectoryRoot();
        this.scanPeriodInSecs = reportBuilderConfiguration.scanPeriodInSecs();
    }

    @Override
    public void write(List<JenkinsBuildResponse> jenkinsBuildResponses) {

        final String buildSummaryContent = createReportGenerationTimeContent(dateTimeGenerator, dateTimeFormatter, scanPeriodInSecs) + "\n" +
                                           createSidebarContent(jenkinsBuildResponses);

        createFileWithContent("buildsSummary.js", buildSummaryContent);
    }

    private void createFileWithContent(String child, String buildSummaryContent) {
        try {
            FileUtils.writeStringToFile(new File(buildsSummaryDestinationFile, child), buildSummaryContent);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private String createReportGenerationTimeContent(DateTimeGenerator dateTimeGeneration, DateTimeFormatter dateTimeFormatter, int scanPeriodInSecs) {
        final DateTime buildStartTime = dateTimeGeneration.now();
        final String buildStartTimeFormatted = dateTimeFormatter.format(buildStartTime);
        final String buildEndTimeFormatted = dateTimeFormatter.format(buildStartTime.plusSeconds(scanPeriodInSecs));

        return "var reportTimeInfo = \"This report has been generated by " + csdVersionLink(reportBuilderConfiguration) + " on " + buildStartTimeFormatted + ". " +
               "Next report will be generated in " + scanPeriodInSecs + " secs, " + buildEndTimeFormatted +
               "\";";
    }

    private String csdVersionLink(ReportBuilderConfiguration reportBuilderConfiguration) {
        return format("<a href='%s'> csd version %s</a>",
                      reportBuilderConfiguration.csdHomePageUrl(),
                      reportBuilderConfiguration.csdBuildNumber());
    }

    private String createSidebarContent(List<JenkinsBuildResponse> jenkinsBuildResponses) {
        return "var sidebarContent = " + buildsSummaryFormatter.format(jenkinsBuildResponses);
    }

}
