package org.binqua.testing.csd.formatter.report.featuremenu;

import org.binqua.testing.csd.JsonTestUtil;
import org.binqua.testing.csd.formatter.external.Configuration;
import org.joda.time.DateTime;
import org.joda.time.LocalDateTime;
import org.junit.Before;
import org.junit.Test;

import org.binqua.testing.csd.cucumberreports.model.Feature;
import org.binqua.testing.csd.cucumberreports.model.Scenario;
import org.binqua.testing.csd.cucumberreports.model.TestCounter;
import org.binqua.testing.csd.formatter.util.DateTimeFactory;

import static java.util.Arrays.asList;
import static org.hamcrest.Matchers.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class TestFeaturesTest {

    private static final String EXPECTED_DATE_TIME_FORMATTED = "Wed 23 Sep 2015 at 17:01:02";
    private static final String A_DATE_TIME = "2015-09-23T17:01:02.000";
    private static final DateTime GENERATION_START_DATE_TIME = LocalDateTime.parse(A_DATE_TIME).toDateTime();
    private static final DateTime GENERATION_END_DATE_TIME = GENERATION_START_DATE_TIME.plusMinutes(2);

    private final Feature firstFeature = mock(Feature.class);
    private final Feature secondFeature = mock(Feature.class);
    private final DateTimeFactory dateTimeFactory = mock(DateTimeFactory.class);
    private final Configuration configuration = mock(Configuration.class);
    private final DurationFormatter durationFormatter = mock(DurationFormatter.class);

    private TestFeatures testFeaturesUnderTest;

    @Before
    public void setUp() throws Exception {
        when(dateTimeFactory.now()).thenReturn(GENERATION_START_DATE_TIME, GENERATION_END_DATE_TIME);
        when(durationFormatter.formatDuration(GENERATION_START_DATE_TIME, GENERATION_END_DATE_TIME)).thenReturn("2 minutes");

        testFeaturesUnderTest = new TestFeatures(dateTimeFactory, configuration, durationFormatter);
    }

    @Test
    public void testAsJson() throws Exception {
        Scenario scenario11 = mock(Scenario.class);
        Scenario scenario12 = mock(Scenario.class);

        Scenario scenario21 = mock(Scenario.class);

        when(firstFeature.getId()).thenReturn("f1");
        when(firstFeature.getName()).thenReturn("first feature");
        when(firstFeature.getScenarios()).thenReturn(asList(scenario11, scenario12));
        when(firstFeature.testCounter()).thenReturn(new TestCounter(1, 3, 4));

        when(secondFeature.getId()).thenReturn("f2");
        when(secondFeature.getName()).thenReturn("second feature");
        when(secondFeature.getScenarios()).thenReturn(asList(scenario21));
        when(secondFeature.testCounter()).thenReturn(new TestCounter(1, 2, 3));

        when(configuration.buildPrettyName()).thenReturn("My Tests Report");
        when(configuration.buildUrl()).thenReturn("http://someUrl/181/");
        when(configuration.multipleReportsHomeUrl()).thenReturn("http://blabla");
        when(configuration.buildNumber()).thenReturn("181");
        when(configuration.isAccessibleFromMultipleReportsPage()).thenReturn(true);
        when(configuration.isGenerateSequenceDiagramEnabled()).thenReturn(true);
        when(configuration.csdBuildNumber()).thenReturn("123");

        testFeaturesUnderTest.add(firstFeature);
        testFeaturesUnderTest.add(secondFeature);

        JsonTestUtil.asJsonAfterReplaceDoubleQuotes(testFeaturesUnderTest,
                                       is("{" +
                                          "'configuration':{" +
                                          "'accessibleFromMultipleReportsPage':true," +
                                          "'multipleReportsHomeUrl':'http://blabla'," +
                                          "'sequenceDiagramSupportDisabled':false," +
                                          "'title':'My Tests Report'" +
                                          "}," +
                                          "'summary':'My Tests Report - Generated by <a href='http://someUrl/181/'>Jenkins Build 181</a> on " + EXPECTED_DATE_TIME_FORMATTED + " - took 2 minutes'," +
                                          "'features':2," +
                                          "'scenarios':3," +
                                          "'tests':14," +
                                          "'passed':2," +
                                          "'failed':5," +
                                          "'skipped':7," +
                                          "'details':[" +
                                          "{'id':'f1','name':'first feature','tests':8,'passed':1,'failed':3,'skipped':4}," +
                                          "{'id':'f2','name':'second feature','tests':6,'passed':1,'failed':2,'skipped':3}" +
                                          "]" +
                                          "}"));
    }

    @Test
    public void givenReportIsNotAccessibleFromMultipleReportsPageThenJsonIsCorrect() throws Exception {

        when(configuration.buildPrettyName()).thenReturn("My Tests Report1");
        when(configuration.isAccessibleFromMultipleReportsPage()).thenReturn(false);
        when(configuration.isGenerateSequenceDiagramEnabled()).thenReturn(false);

        JsonTestUtil.asJsonAfterReplaceDoubleQuotes(testFeaturesUnderTest,
                                       is("{" +
                                          "'configuration':{" +
                                          "'accessibleFromMultipleReportsPage':false," +
                                          "'sequenceDiagramSupportDisabled':true," +
                                          "'title':'My Tests Report1'" +
                                          "}," +
                                          "'summary':'Generated on " + EXPECTED_DATE_TIME_FORMATTED + " - took 2 minutes'," +
                                          "'features':0," +
                                          "'scenarios':0," +
                                          "'tests':0," +
                                          "'passed':0," +
                                          "'failed':0," +
                                          "'skipped':0," +
                                          "'details':[]" +
                                          "}"));
    }

}