package org.binqua.testing.csd.formatter.report.featuremenu;

import com.google.gson.Gson;
import com.google.gson.JsonElement;

import org.binqua.testing.csd.formatter.external.Configuration;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;

import org.binqua.testing.csd.cucumberreports.model.Feature;
import org.binqua.testing.csd.cucumberreports.model.Scenario;
import org.binqua.testing.csd.cucumberreports.model.TestCounter;
import org.binqua.testing.csd.formatter.report.conversation.ToJson;
import org.binqua.testing.csd.formatter.util.DateTimeFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

public class TestFeatures implements ToJson {

    private final DateTime generationStartDateTime;
    private List<Feature> features = new ArrayList<>();
    private DateTimeFactory dateTimeFactory;
    private Configuration csdConfiguration;
    private DurationFormatter durationFormatter;

    public TestFeatures(DateTimeFactory dateTimeFactory, Configuration csdConfiguration, DurationFormatter durationFormatter) {
        this.dateTimeFactory = dateTimeFactory;
        this.csdConfiguration = csdConfiguration;
        this.durationFormatter = durationFormatter;
        this.generationStartDateTime = dateTimeFactory.now();
    }

    public void add(Feature feature) {
        features.add(feature);
    }

    @Override
    public JsonElement asJson() {
        return new Gson().toJsonTree(new Summary(features));
    }

    private String format(DateTime dateTime) {
        return DateTimeFormat.forPattern("EEE dd MMM yyyy 'at' HH:mm:ss").print(dateTime);
    }

    class Detail {

        private String id;
        private String name;
        private int tests;
        private int passed;
        private int failed;
        private int skipped;

        Detail(String id, String name, TestCounter testCounter) {
            this.id = id;
            this.name = name;
            tests = testCounter.numberOfTotalTests();
            passed = testCounter.numberOfPassedTests();
            failed = testCounter.numberOfFailedTests();
            skipped = testCounter.numberOfSkippedTests();
        }

    }

    class Summary {

        private ConfigurationBean configuration;
        private String summary;
        private long features;
        private long scenarios;
        private long tests;
        private long passed;
        private long failed;
        private long skipped;
        private List<Detail> details = new ArrayList<>();

        Summary(List<Feature> featureList) {
            configuration = new ConfigurationBean(csdConfiguration.isAccessibleFromMultipleReportsPage(),
                                                  csdConfiguration.multipleReportsHomeUrl(),
                                                  !csdConfiguration.isGenerateSequenceDiagramEnabled(),
                                                  csdConfiguration.buildPrettyName());
            summary = createSummaryText(dateTimeFactory, csdConfiguration, durationFormatter);
            List<Scenario> scenariosList = featureList.stream().map(Feature::getScenarios).flatMap(Collection::stream).collect(Collectors.toList());
            features = featureList.size();
            tests = featureList.stream().mapToInt(f -> f.testCounter().numberOfTotalTests()).sum();
            passed = featureList.stream().mapToInt(f -> f.testCounter().numberOfPassedTests()).sum();
            skipped = featureList.stream().mapToInt(f -> f.testCounter().numberOfSkippedTests()).sum();
            failed = featureList.stream().mapToInt(f -> f.testCounter().numberOfFailedTests()).sum();
            scenarios = scenariosList.size();
            details = featureList.stream().map(feature -> new Detail(feature.getId(), feature.getName(), feature.testCounter())).collect(Collectors.toList());
        }

        private String createSummaryText(DateTimeFactory dateTimeFactory, Configuration configuration, DurationFormatter durationFormatter) {
            if (configuration.isAccessibleFromMultipleReportsPage()){
                return String.format("%s - Generated by <a href='%s'>Jenkins Build %s</a> on %s - took %s",
                                     configuration.buildPrettyName(),
                                     configuration.buildUrl(),
                                     configuration.buildNumber(),
                                     format(generationStartDateTime),
                                     durationFormatter.formatDuration(generationStartDateTime, dateTimeFactory.now()));
            }
            return String.format("Generated on %s - took %s",
                          format(generationStartDateTime),
                          durationFormatter.formatDuration(generationStartDateTime, dateTimeFactory.now()));
        }
    }

    class ConfigurationBean {

        private final boolean accessibleFromMultipleReportsPage;
        private final String multipleReportsHomeUrl;
        private final boolean sequenceDiagramSupportDisabled;
        private final String title;

        ConfigurationBean(boolean accessibleFromMultipleReportsPage,
                          String multipleReportsHomeUrl,
                          boolean sequenceDiagramSupportDisabled,
                          String title) {
            this.accessibleFromMultipleReportsPage = accessibleFromMultipleReportsPage;
            this.multipleReportsHomeUrl = multipleReportsHomeUrl;
            this.sequenceDiagramSupportDisabled = sequenceDiagramSupportDisabled;
            this.title = title;
        }

    }

}
